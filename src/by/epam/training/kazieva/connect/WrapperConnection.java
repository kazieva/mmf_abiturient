package by.epam.training.kazieva.connect;

import java.sql.*;
import java.util.Properties;

public class WrapperConnection {
   // private static final Logger LOGGER = Logger.getLogger(WrapperConnection.class);
    private Connection connection;

    WrapperConnection() {
        String url = "jdbc:mysql://localhost:3306/mmf";
        String user = "admin";
        String pass = "admin";
        Properties properties = new Properties();
        properties.put("user", user);
        properties.put("password", pass);
        properties.put("autoReconnect", "true");
        properties.put("characterEncoding", "UTF-8");
        properties.put("useUnicode", "true");

        try {
            connection = DriverManager.getConnection(url, properties);
        } catch (SQLException e) {
         //   LOGGER.error(e);
            System.out.println(e);
        }
    }

    public Statement getStatement() throws SQLException {
        if (connection != null) {
            Statement statement = null;
            try {
                statement = connection.createStatement();
            } catch (SQLException e) {
                //LOGGER.error(e);
                System.out.println(e);
            }
            if (statement != null) {
                return statement;
            }
        }
        throw new SQLException("connection or statement is null");
    }

    public void closeStatement(Statement statement) {
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
             //   LOGGER.error("statement is null ", e);
                System.out.println("statement is null ");
            }
        }
    }

    // вызывается в пуле при closePool
    void closeConnection() {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
             //   LOGGER.error("wrong connection", e);
                System.out.println("wrong connection");
            }
        }
    }

// другие необходимые делегированные методы интерфейса Connection

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }


    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return connection.prepareStatement(sql, columnIndexes);
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return connection.prepareStatement(sql, columnNames);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }
}
